services:
  # docker-proxy:
  #     image: tecnativa/docker-socket-proxy
  #     container_name: docker-proxy
  #     hostname: docker-proxy
  #     restart: always
  #     privileged: true
  #     environment:
  #       - CONTAINERS=1
  #       - INFO=1
  #       - SERVICES=1
  #     volumes:
  #       - /var/run/docker.sock:/var/run/docker.sock
  #     ports:
  #       - 2375:2375
  # telegraf:
  #   image: telegraf:1.34.3-alpine
  #   container_name: telegraf
  #   hostname: telegraf
  #   user: root
  #   privileged: true
  #   restart: unless-stopped
  #   volumes:
  #     - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
  #   ports:
  #     - "9273:9273"
  # cadvisor:
  #   container_name: cadvisor
  #   hostname: cadvisor
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   restart: unless-stopped
  #   volumes:
  #     - "/:/rootfs"
  #     - "/var/run:/var/run"
  #     - "/sys:/sys"
  #     - "/var/lib/docker/:/var/lib/docker"
  #     - "/dev/disk/:/dev/disk"
  #   privileged: true
  #   devices:
  #     - "/dev/kmsg"
  #   networks:
  #     - shared-network
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    privileged: true
    # depends_on:
    #   - cadvisor
    restart: unless-stopped
    networks:
      - shared-network

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    privileged: true
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks:
      - shared-network
  loki:
    container_name: loki
    hostname: loki
    image: grafana/loki:3.5.0
    ports:
      - "3100:3100"
    volumes:
      - "./loki-config.yaml:/mnt/config/loki-config.yaml"
    command: 
      - -config.file=/mnt/config/loki-config.yaml
    restart: unless-stopped
    networks:
      - shared-network

  nginx:
    container_name: loki-proxy
    image: nginx:alpine
    ports:
      - "3200:80"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - shared-network

  # nanoservice-http:
  #   container_name: nanoservice-http
  #   hostname: nanoservice-http
  #   build:
  #     context: ../../triggers/http
  #     dockerfile: Dockerfile
  #   ports:
  #     - "4000:4000"
  #     - "9091:9091"
  #   restart: unless-stopped
  #   logging: # Log to Loki. Enable this to see logs in Grafana.
  #     driver: loki
  #     options:
  #       loki-url: "http://localhost:3100/loki/api/v1/push"
  #       loki-retries: 5
  #       loki-batch-size: 400
  #   depends_on:
  #     - loki
  #   networks:
  #     - shared-network
volumes:
  grafana-data:
networks:
  shared-network:
    external: true

# docker network create shared-network